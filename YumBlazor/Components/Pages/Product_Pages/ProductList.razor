@page "/product"
@using System.Globalization

@inject IProductRepository _productRepository
@inject IJSRuntime _JS

<PageTitle>Products</PageTitle>

<_BsModal OnModalConfirmation="ConfirmDelete_Click"
          Title="Delete Confirmation"
          Text="Are you sure you want to delete this Product?"
          ButtonBootstrapStyle="btn-danger"
          ButtonText="Delete">
</_BsModal>

<div class="container">

    @if (IsProcessing)
    {
        <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
            <img src="/Images/loading.gif" alt="Loading" />
        </div>
    }
    else
    {
        <div class="card shadow border-0 mt-4">
            <div class="card-header bg-black bg-gradient m-lg-0 py-3">
                <div class="row">
                    <div class="col-12 text-center">
                        <h2 class="text-white py-2">Product List</h2>
                    </div>
                </div>
            </div>

            <div class="card-body p-4">
                <div class="row pb-3">
                    <div class="col-12 text-end">
                        <a href="/product/create" class="btn btn-lg btn-secondary" style="width:250px">
                            <i class="bi bi-plus-square"></i> Add Product
                        </a>
                    </div>
                </div>

                @if (Products.Any())
                {
                    <table class="table table-bordered table-striped caption-top">
                        <caption class="fw-bold fs-4">List of Products</caption>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Price</th>
                                <th>Special Tag</th>
                                <th>Category</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody class="align-middle">
                            @foreach (var item in Products)
                            {
                                <tr>
                                    <td>@item.Name</td>
                                    <td>@item.Price.ToString("C", CultureInfo.GetCultureInfo("pt-pt"))</td>
                                    <td><span class="badge text-bg-info">@item.SpecialTag</span></td>
                                    <td>@item.Category!.Name</td>
                                    <td class="text-end">
                                        <a class="btn btn-outline-warning text-black fw-bold" href="@($"/product/update/{item.Id}")">
                                            <i class="bi bi-pencil-square"></i> Edit
                                        </a>

                                        <button class="btn btn-outline-danger fw-bold" @onclick="() => HandleDelete(item.Id)">
                                            <i class="bi bi-trash"></i> Del
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

            </div>
        </div>
    }

</div>

@code {
    private bool IsProcessing { get; set; } = true;     // Start as false is using "OnInitializedAsync" Method

    private IEnumerable<Product> Products { get; set; } = new List<Product>();

    private int DeleteProductId { get; set; } = 0;

    // protected override async Task OnInitializedAsync()     // Method to use with Global Interaction
    // {
    //     IsProcessing = true;

    //     await Task.Delay(1000); Simulating a delay for initial loading
    //     await LoadProducts();
    //     Thread.Sleep(2500); // Simulating a delay for loading data

    //     IsProcessing = false;
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)       // Method to use with Page Interaction (Also works with Global)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }

    }

    private async Task LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
    }

    private void HandleDelete(int id)
    {
        //Logic
        DeleteProductId = id;
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;

        await _JS.InvokeVoidAsync("HideConfirmationModal");

        if (isConfirmed && DeleteProductId != 0)
        {
            var result = await _productRepository.DeleteAsync(DeleteProductId);

            if (result)
                _JS?.ToastrSuccess("Product deleted successfully.");
            else
                _JS?.ToastrError("Failed to delete product. Please try again.");

            await LoadProducts();
        }

        DeleteProductId = 0; // Reset after confirmation
        IsProcessing = false;

    }
}
