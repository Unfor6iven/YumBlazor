@page "/category/create"
@page "/category/update/{Id:int}"

@inject NavigationManager _navigationManager
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _JS

<PageTitle>@(Id > 0 ? "Update" : "Create") Category</PageTitle>



<div class="container">

    @if (IsProcessing)
    {
        <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
            <img src="/Images/loading.gif" alt="Loading" />
        </div>
    }
    else
    {
        <div class="card shadow border-0 mt-4">
            <div class="card-header bg-black bg-gradient m-lg-0 py-3">

                <div class="row">
                    <div class="col-12 text-center">
                        <h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create") Category</h2>
                    </div>
                </div>

            </div>

            <div class="card-body p-4">

                <EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpsertCategory">

                    <DataAnnotationsValidator />

                    <div class="border p-3 mt-4">
                        <div class="form-floating py-3 col-12">
                            <label for="Name">Category Name</label>
                            <InputText id="Name" class="form-control" @bind-Value="Category.Name" />
                            <ValidationMessage For="() => Category.Name" />
                        </div>

                        <div class="row mt-3 justify-content-end">
                            <div class="col-6 col-md-3">
                                <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                    <i class="bi bi-floppy2"></i> @(Id > 0 ? "Update" : "Create")
                                </button>
                            </div>

                            <div class="col-6 col-md-3">
                                <button @onclick="OnUpsertCategoryCancel" href="category" class="btn btn-secondary form-control">
                                    <i class="bi bi-arrow-left-square"></i> Back to List
                                </button>
                            </div>
                        </div>

                    </div>

                </EditForm>

            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Category Category { get; set; } = new Category();

    private bool IsProcessing { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)       // Method to use with Page Interaction (Also works with Global)
    {
        if (firstRender)
        {
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }

    }

    private async Task LoadCategories()
    {
        if (Id > 0)
        {
            Category = await _categoryRepository.GetAsync(Id);
        }

    }

    private async Task UpsertCategory()
    {
        IsProcessing = true;

        if (Category.Id == 0)       // Create
        {
            await _categoryRepository.CreateAsync(Category);
            await _JS.ToastrSuccess("Category created successfully!");
        }
        else                        // Update
        {
            await _categoryRepository.UpdateAsync(Category);
            await _JS.ToastrSuccess("Category Updated successfully!");
        }

        IsProcessing = false;
        _navigationManager.NavigateTo("category");

    }

    private void OnUpsertCategoryCancel()
    {
        _navigationManager.NavigateTo("category", true);
    }
}
